# KEEP THIS FILE AS CLEAN AND MINIMAL AS POSSIBLE
# PLEASE DO NOT OVERWRITE PROPERTIES WITH THEIR DEFAULT VALUES, IT'S POINTLESS
#           ^^^                                 ^^^^^^^
# HERE IS REFERENCE TEMPLATE:
# https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

# ===============================
# = SERVER
# ===============================
# Server HTTP port.
server.port = 8080

# ===============================
# = SPRING RESOURCES HANDLING
# ===============================
# Locations of static resources.
#spring.resources.static-locations = /WEB-INF/static
# ^ I should use a handler for static resources instead.
# http://www.baeldung.com/spring-mvc-static-resources
# https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html

# ===============================
# = FREEMARKER
# ===============================
# Comma-separated list of template paths.
#spring.freemarker.template-loader-path: classpath:/templates
# Suffix that gets appended to view names when building a URL.
#spring.freemarker.suffix = .ftl

# ===============================
# = LOGGING
# ===============================
# Log levels severity mapping.
logging.level.org.springframework = info
logging.level.org.hibernate.SQL = info

# ===============================
# = H2 WEB CONSOLE
# ===============================
# Enable the console. (default:= false)
spring.h2.console.enabled = true
# Path at which the console will be available. (default:= /h2-console)
spring.h2.console.path = /h2-console
#spring.datasource.url=jdbc:h2:file:~/codehub_bookstore;IFEXISTS=FALSE
#spring.datasource.url=jdbc:h2:mem:codehub_bookstore
#spring.datasource.username=sa
#spring.datasource.hikari.maximum-pool-size=30
#spring.datasource.driver-class-name=org.h2.Driver

# ===============================
# = DATA SOURCE
# ===============================
# Connection url for the database "codehub"
# without verifying DB identity nor using or requiring SSL
#spring.datasource.url = jdbc:postgresql://localhost:5432/codehub
#spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/under_construction?\
  allowPublicKeyRetrieval=true&\
  verifyServerCertificate=false&\
  useSSL=false&\
  requireSSL=false&\
  useUnicode=true&\
  useJDBCCompliantTimezoneShift=false&\
  useLegacyDatetimeCode=false&\
  serverTimezone=Europe/Athens
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver

# Username and password
#spring.datasource.username = postgres1
#spring.datasource.password = postgres1
spring.datasource.username = root
spring.datasource.password = admin123

# Populate the database using 'schema.sql' and 'data.sql'.
spring.datasource.initialization-mode = NEVER

# Platform to use in the DDL or DML scripts (e.g. schema-${platform}.sql or data-${platform}.sql). (default:= all)
spring.datasource.platform = all

# Stop if an error occurs while initializing the database.
spring.datasource.continue-on-error = true

# Set here configurations for the database connection
# could be autoconfigured, or set to MysqlDataSource or MysqlConnectionPoolDataSource
#spring.datasource.type = org.postgresql.jdbc2.optional.PoolingDataSource
#spring.datasource.type = com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.tomcat.test-on-borrow = true
spring.datasource.tomcat.time-between-eviction-runs-millis = 60000
spring.datasource.tomcat.validation-query = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties
# (the prefix is stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update, validate): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create

# Naming strategy
# way too advanced configuration for the purpose of this course
spring.jpa.hibernate.naming.implicit-strategy= org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy= org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

# ===============================
# = FLYWAY
# ===============================
#Flyway configuration
#spring.flyway.user=databaseUser
#spring.flyway.password=databasePassword
#spring.flyway.schemas=app-db
#spring.flyway.url=jdbc:h2:mem:DATABASE
#spring.flyway.locations=classpath:db/migration
#spring.flyway.sql-migration-prefix=

# This makes no sense in production, but enables hot loading ;spring.freemarker.cache=false
spring.freemarker.prefer-file-system-access=true
spring.freemarker.template-loader-path=file:C:\Users\Δημητρα\Desktop\developers-orchestra\src\main\resources\templates, classpath:templates, classpath:static\js
spring.resources.static-locations[0]=file:src\main\resources\static\
spring.resources.static-locations[1]=classpath:\static\

